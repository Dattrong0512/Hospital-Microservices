document.addEventListener("DOMContentLoaded", function () {
  // Bi·∫øn l∆∞u tr·∫°ng th√°i hi·ªán t·∫°i
  $(document).ready(function () {
    // X·ª≠ l√Ω n√∫t Th√™m thu·ªëc trong modal
    $("#btnAddMedicine")
      .off("click")
      .on("click", function () {
        // Hi·ªÉn th·ªã tr·∫°ng th√°i loading
        const btn = $(this);
        const originalText = btn.html();
        btn.html(
          '<span class="spinner-border spinner-border-sm mr-1"></span> ƒêang th√™m...'
        );
        btn.prop("disabled", true);

        // G·ªçi h√†m th√™m thu·ªëc
        addMedicine();

        // Kh√¥i ph·ª•c n√∫t sau 1 gi√¢y
        setTimeout(() => {
          btn.html(originalText);
          btn.prop("disabled", false);
        }, 1000);
      });

    // X·ª≠ l√Ω n√∫t L∆∞u thay ƒë·ªïi trong modal ch·ªânh s·ª≠a
    $("#btnSaveEdit")
      .off("click")
      .on("click", function () {
        // Hi·ªÉn th·ªã tr·∫°ng th√°i loading
        const btn = $(this);
        const originalText = btn.html();
        btn.html(
          '<span class="spinner-border spinner-border-sm mr-1"></span> ƒêang l∆∞u...'
        );
        btn.prop("disabled", true);

        // G·ªçi h√†m c·∫≠p nh·∫≠t thu·ªëc
        updateMedicine();

        // Kh√¥i ph·ª•c n√∫t sau 1 gi√¢y
        setTimeout(() => {
          btn.html(originalText);
          btn.prop("disabled", false);
        }, 1000);
      });

    // X·ª≠ l√Ω n√∫t X√≥a trong modal x√°c nh·∫≠n x√≥a
    $("#confirmDeleteBtn")
      .off("click")
      .on("click", function () {
        // Hi·ªÉn th·ªã tr·∫°ng th√°i loading
        const btn = $(this);
        const originalText = btn.html();
        btn.html(
          '<span class="spinner-border spinner-border-sm mr-1"></span> ƒêang x√≥a...'
        );
        btn.prop("disabled", true);

        // G·ªçi h√†m x√≥a thu·ªëc
        deleteMedicine();

        // Kh√¥i ph·ª•c n√∫t sau 1 gi√¢y
        setTimeout(() => {
          btn.html(originalText);
          btn.prop("disabled", false);
        }, 1000);
      });

    // X·ª≠ l√Ω n√∫t h·ªßy v√† ƒë√≥ng modal
    $('[data-dismiss="modal"]')
      .off("click")
      .on("click", function () {
        const modalId = $(this).closest(".modal").attr("id");
        $(`#${modalId}`).modal("hide");
      });

    // ƒê·∫£m b·∫£o modal ƒë√≥ng ƒë√∫ng
    $(".modal").on("hidden.bs.modal", function () {
      $("body").removeClass("modal-open");
      $(".modal-backdrop").remove();
    });
  });
  let currentPage = 1;
  let totalPages = 1;
  let limit = 10;
  let searchTerm = "";
  let sortField = "medicine_id";
  let sortDirection = "asc";
  let currentFilters = {
    expiry: "",
    amount: "",
  };
  let viewingNearExpiry = false;
  let selectedMedicineId = null;

  // Kh·ªüi t·∫°o ·ª©ng d·ª•ng
  init();

  /**
   * Kh·ªüi t·∫°o c√°c ch·ª©c nƒÉng c·ªßa ·ª©ng d·ª•ng
   */
  function init() {
    // T·∫£i d·ªØ li·ªáu thu·ªëc m·∫∑c ƒë·ªãnh
    loadMedicines();

    // Thi·∫øt l·∫≠p c√°c s·ª± ki·ªán
    setupEventListeners();

    // Kh·ªüi t·∫°o c√°c th√†nh ph·∫ßn giao di·ªán
    initializeDatepickers();

    console.log("‚úì Kh·ªüi t·∫°o qu·∫£n l√Ω thu·ªëc ho√†n t·∫•t");
  }

  /**
   * Thi·∫øt l·∫≠p c√°c s·ª± ki·ªán trong ·ª©ng d·ª•ng
   */
  function setupEventListeners() {
    // S·ª± ki·ªán t√¨m ki·∫øm
    const searchInput = document.getElementById("searchMedicine");
    if (searchInput) {
      let searchTimeout;

      // T√¨m ki·∫øm khi nh·∫•n Enter
      searchInput.addEventListener("keyup", function (e) {
        if (e.key === "Enter" || e.keyCode === 13) {
          clearTimeout(searchTimeout);
          performSearch();
        } else {
          // Debounce search - t√¨m ki·∫øm sau 500ms kh√¥ng g√µ
          clearTimeout(searchTimeout);
          searchTimeout = setTimeout(() => {
            if (this.value.trim() !== searchTerm) {
              performSearch();
            }
          }, 500);
        }
      });

      // T√¨m ki·∫øm khi m·∫•t focus
      searchInput.addEventListener("blur", function () {
        if (this.value.trim() !== searchTerm) {
          performSearch();
        }
      });
    }

    // H√†m th·ª±c hi·ªán t√¨m ki·∫øm
    function performSearch() {
      const newSearchTerm = searchInput.value.trim();
      console.log("üîç [SEARCH] Performing search with term:", newSearchTerm);

      searchTerm = newSearchTerm;
      currentPage = 1;
      viewingNearExpiry = false;
      resetFilters();
      loadMedicines();
    }

    document
      .getElementById("btn-near-expiry")
      .addEventListener("click", function () {
        console.log("‚ö†Ô∏è [NEAR_EXPIRY] Button clicked");

        viewingNearExpiry = true;
        searchTerm = "";
        currentPage = 1;
        resetFilters();

        // Clear search input
        const searchInput = document.getElementById("searchMedicine");
        if (searchInput) {
          searchInput.value = "";
        }

        loadMedicines();
      });

    // S·ª± ki·ªán ph√¢n trang
    document.getElementById("prevPage").addEventListener("click", function (e) {
      e.preventDefault();
      if (currentPage > 1) {
        currentPage--;
        loadMedicines();
      }
    });

    document.getElementById("nextPage").addEventListener("click", function (e) {
      e.preventDefault();
      if (currentPage < totalPages) {
        currentPage++;
        loadMedicines();
      }
    });

    // S·ª± ki·ªán s·∫Øp x·∫øp c·ªôt
    document.querySelectorAll(".sortable").forEach((column) => {
      column.addEventListener("click", function () {
        const field = this.getAttribute("data-sort");

        // N·∫øu click v√†o c√πng c·ªôt ƒëang s·∫Øp x·∫øp, ƒë·∫£o chi·ªÅu
        if (field === sortField) {
          sortDirection = sortDirection === "asc" ? "desc" : "asc";
        } else {
          sortField = field;
          sortDirection = "asc";
        }

        // C·∫≠p nh·∫≠t giao di·ªán
        updateSortUI();

        // T·∫£i l·∫°i d·ªØ li·ªáu
        loadMedicines();
      });
    });

    // S·ª± ki·ªán l·ªçc
    document
      .getElementById("apply-filter")
      .addEventListener("click", function () {
        currentFilters.expiry = document.getElementById("expiry-filter").value;
        currentFilters.amount = document.getElementById("amount-filter").value;
        currentPage = 1;
        console.log("‚úèÔ∏è √Åp d·ª•ng b·ªô l·ªçc:", currentFilters);
        loadMedicines();
      });

    document
      .getElementById("reset-filter")
      .addEventListener("click", function () {
        console.log("‚úèÔ∏è Reset b·ªô l·ªçc");
        resetFilters();
        loadMedicines();
      });

    document
      .getElementById("clear-filters")
      .addEventListener("click", function () {
        console.log("‚úèÔ∏è X√≥a t·∫•t c·∫£ b·ªô l·ªçc");
        resetFilters();
        loadMedicines();
      });

    // S·ª± ki·ªán xem thu·ªëc s·∫Øp h·∫øt h·∫°n
    document
      .getElementById("btn-near-expiry")
      .addEventListener("click", function () {
        viewingNearExpiry = true;
        searchTerm = "";
        currentPage = 1;
        resetFilters();
        document.getElementById("searchMedicine").value = "";
        loadMedicines();
      });

    // Th√™m thu·ªëc m·ªõi
    document
      .getElementById("btnAddMedicine")
      .addEventListener("click", function () {
        addMedicine();
      });

    // S·ª± ki·ªán khi m·ªü modal chi ti·∫øt
    // $("#viewMedicineModal").on("show.bs.modal", function (e) {
    //   const medicineId = e.relatedTarget.getAttribute("data-id");
    //   loadMedicineDetails(medicineId);
    // });

    // S·ª± ki·ªán khi m·ªü modal ch·ªânh s·ª≠a t·ª´ chi ti·∫øt
    // document
    //   .getElementById("btnEditMedicine")
    //   .addEventListener("click", function () {
    //     // ƒê√≥ng modal chi ti·∫øt v√† m·ªü modal ch·ªânh s·ª≠a
    //     $("#viewMedicineModal").modal("hide");
    //     $("#editMedicineModal").modal("show");

    //     // T·∫£i th√¥ng tin thu·ªëc v√†o form ch·ªânh s·ª≠a
    //     populateEditForm(selectedMedicineId);
    //   });

    // L∆∞u ch·ªânh s·ª≠a thu·ªëc
    document
      .getElementById("btnSaveEdit")
      .addEventListener("click", function () {
        updateMedicine();
      });

    // M·ªü modal x√°c nh·∫≠n x√≥a thu·ªëc
    // document
    //   .getElementById("btnDeleteMedicine")
    //   .addEventListener("click", function () {
    //     const medicineId = document.getElementById("editMedicineId").value;
    //     const medicineName = document.getElementById("editMedicineName").value;

    //     document.getElementById("deleteMedicineId").value = medicineId;
    //     document.getElementById("deleteMedicineName").textContent =
    //       medicineName;

    //     $("#editMedicineModal").modal("hide");
    //     $("#deleteMedicineModal").modal("show");
    //   });

    // X√°c nh·∫≠n x√≥a thu·ªëc
    document
      .getElementById("confirmDeleteBtn")
      .addEventListener("click", function () {
        deleteMedicine();
      });

    document.querySelectorAll('[data-dismiss="modal"]').forEach((button) => {
      button.addEventListener("click", function () {
        const modalId = this.closest(".modal").id;
        $(`#${modalId}`).modal("hide");
      });
    });

    // ƒê·∫£m b·∫£o modal c√≥ th·ªÉ ƒë√≥ng khi click n√∫t X
    document.querySelectorAll(".modal .close").forEach((button) => {
      button.addEventListener("click", function () {
        const modalId = this.closest(".modal").id;
        $(`#${modalId}`).modal("hide");
      });
    });
  }

  /**
   * Kh·ªüi t·∫°o date picker cho c√°c tr∆∞·ªùng ng√†y th√°ng
   */
  function initializeDatepickers() {
    const dateInputs = document.querySelectorAll('input[type="date"]');
    dateInputs.forEach((input) => {
      input.addEventListener("click", function () {
        this.showPicker();
      });

      // Th√™m s·ª± ki·ªán cho n√∫t calendar
      const parent = input.closest(".datepicker-container");
      if (parent) {
        const calendarBtn = parent.querySelector(".input-group-text");
        if (calendarBtn) {
          calendarBtn.addEventListener("click", function () {
            input.showPicker();
          });
        }
      }
    });
  }

  /**
   * T·∫£i danh s√°ch thu·ªëc t·ª´ API
   */
  function loadMedicines() {
    console.log("üì° B·∫Øt ƒë·∫ßu t·∫£i d·ªØ li·ªáu thu·ªëc");
    console.log("üìã Tr·∫°ng th√°i hi·ªán t·∫°i:", {
      page: currentPage,
      limit: limit,
      searchTerm: searchTerm,
      viewingNearExpiry: viewingNearExpiry,
      filters: currentFilters,
    });

    showLoading(true);

    let url;
    let params = `page=${currentPage}&limit=${limit}`;

    // ‚úÖ S·ª¨A: URL mapping theo API Python
    if (viewingNearExpiry) {
      // G·ªçi API thu·ªëc s·∫Øp h·∫øt h·∫°n
      url = `/UDPT-QLBN/Medicine/api_getNearExpiryMedicines?${params}`;
      console.log("‚ö†Ô∏è [LOAD] Loading near expiry medicines");
    } else if (searchTerm && searchTerm.trim() !== "") {
      // G·ªçi API t√¨m ki·∫øm thu·ªëc theo t√™n
      url = `/UDPT-QLBN/Medicine/api_searchMedicines?query=${encodeURIComponent(
        searchTerm.trim()
      )}&${params}`;
      console.log("üîç [LOAD] Searching medicines with term:", searchTerm);
    } else {
      // G·ªçi API l·∫•y t·∫•t c·∫£ thu·ªëc
      url = `/UDPT-QLBN/Medicine/api_getAllMedicines?${params}`;
      console.log("üìã [LOAD] Loading all medicines");
    }

    console.log("üì° G·ªçi API:", url);

    fetch(url)
      .then((response) => {
        console.log("üì° Response status:", response.status);

        if (!response.ok) {
          console.error("‚ùå API tr·∫£ v·ªÅ l·ªói:", response.status);
          throw new Error(`L·ªói HTTP: ${response.status}`);
        }
        return response.json();
      })
      .then((data) => {
        console.log("‚úÖ T·∫£i d·ªØ li·ªáu thu·ªëc th√†nh c√¥ng:", data);

        // ‚úÖ X·ª¨ L√ù RESPONSE THEO FORMAT PYTHON API
        let processedData;

        if (data && typeof data === "object") {
          // N·∫øu c√≥ c·∫•u tr√∫c ph√¢n trang t·ª´ Python API
          if (data.hasOwnProperty("data") && Array.isArray(data.data)) {
            processedData = data;
            console.log("üìä [LOAD] Structured response with pagination");
          }
          // N·∫øu l√† array ƒë∆°n gi·∫£n
          else if (Array.isArray(data)) {
            processedData = {
              data: data,
              page: currentPage,
              limit: limit,
              total: data.length,
              total_pages: Math.ceil(data.length / limit),
            };
            console.log(
              "üìä [LOAD] Array response, created pagination structure"
            );
          }
          // N·∫øu c√≥ l·ªói
          else if (data.hasOwnProperty("error")) {
            throw new Error(data.error);
          } else {
            throw new Error("ƒê·ªãnh d·∫°ng d·ªØ li·ªáu API kh√¥ng h·ª£p l·ªá");
          }
        } else {
          throw new Error("D·ªØ li·ªáu API kh√¥ng h·ª£p l·ªá");
        }

        // Hi·ªÉn th·ªã th√¥ng tin v·ªÅ ƒë·ªãnh d·∫°ng ng√†y n·∫øu c√≥ d·ªØ li·ªáu
        if (processedData.data && processedData.data.length > 0) {
          const sample = processedData.data[0];
          console.log("üìÖ M·∫´u ƒë·ªãnh d·∫°ng ng√†y:", {
            MFG: sample.MFG,
            MFG_type: typeof sample.MFG,
            EXP: sample.EXP,
            EXP_type: typeof sample.EXP,
          });
        }

        // C·∫≠p nh·∫≠t d·ªØ li·ªáu ph√¢n trang
        updatePaginationInfo(processedData);

        // Hi·ªÉn th·ªã d·ªØ li·ªáu
        displayMedicines(processedData.data);
      })
      .catch((error) => {
        console.error("‚ùå L·ªói khi t·∫£i d·ªØ li·ªáu thu·ªëc:", error);
        showAlert(
          `Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu thu·ªëc. L·ªói: ${error.message}`,
          "danger"
        );
      })
      .finally(() => {
        console.log("üì° Ho√†n th√†nh t·∫£i d·ªØ li·ªáu thu·ªëc");
        showLoading(false);
      });
  }

  /**
   * Hi·ªÉn th·ªã danh s√°ch thu·ªëc
   * @param {Array} medicines Danh s√°ch thu·ªëc
   */
  function displayMedicines(medicines) {
    console.log("üìã Hi·ªÉn th·ªã danh s√°ch thu·ªëc:", medicines);
    const tbody = document.querySelector("#medicinesTable tbody");
    const noResultsRow = document.getElementById("no-results-row");

    // X√≥a d·ªØ li·ªáu c≈© (tr·ª´ h√†ng th√¥ng b√°o kh√¥ng c√≥ k·∫øt qu·∫£)
    const rows = tbody.querySelectorAll("tr:not(#no-results-row)");
    rows.forEach((row) => row.remove());

    // Ki·ªÉm tra n·∫øu kh√¥ng c√≥ d·ªØ li·ªáu
    if (!medicines || medicines.length === 0) {
      console.warn("‚ö†Ô∏è Kh√¥ng c√≥ d·ªØ li·ªáu thu·ªëc ƒë·ªÉ hi·ªÉn th·ªã");
      noResultsRow.style.display = "table-row";
      return;
    }

    // L·ªçc d·ªØ li·ªáu theo b·ªô l·ªçc hi·ªán t·∫°i
    console.log("üîç B·∫Øt ƒë·∫ßu l·ªçc d·ªØ li·ªáu v·ªõi b·ªô l·ªçc:", currentFilters);
    const filteredMedicines = filterMedicines(medicines);
    console.log("üîç K·∫øt qu·∫£ sau khi l·ªçc:", filteredMedicines);

    // Hi·ªÉn th·ªã th√¥ng b√°o n·∫øu kh√¥ng c√≥ k·∫øt qu·∫£
    if (filteredMedicines.length === 0) {
      console.warn("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y thu·ªëc ph√π h·ª£p v·ªõi b·ªô l·ªçc");
      noResultsRow.style.display = "table-row";
      return;
    }

    // ·∫®n th√¥ng b√°o kh√¥ng c√≥ k·∫øt qu·∫£
    noResultsRow.style.display = "none";
    console.log("‚úÖ Hi·ªÉn th·ªã", filteredMedicines.length, "thu·ªëc ph√π h·ª£p");

    // Hi·ªÉn th·ªã d·ªØ li·ªáu
    filteredMedicines.forEach((medicine) => {
      const row = document.createElement("tr");

      // T√≠nh to√°n tr·∫°ng th√°i h·∫°n s·ª≠ d·ª•ng
      const expStatus = getExpiryStatus(medicine.EXP);
      const expiryClass = getExpiryClass(expStatus);

      row.innerHTML = `
      <td>${medicine.medicine_id}</td>
      <td>
        <div class="d-flex align-items-center">
          <div>
            <div class="font-weight-bold">${medicine.name}</div>
            <div class="small ${expiryClass.text}">
              <span class="badge ${expiryClass.badge} mr-1">
                <i class="fas fa-clock mr-1"></i>${expStatus.text}
              </span>
            </div>
          </div>
        </div>
      </td>
      <td>${formatDate(medicine.MFG)}</td>
      <td>${formatDate(medicine.EXP)}</td>
      <td class="text-right">${medicine.amount.toLocaleString()}</td>
      <td>${medicine.unit}</td>
      <td class="text-right">${medicine.price.toLocaleString()} ƒë</td>
      <td>
        <div class="btn-group">
          <button type="button" class="btn btn-sm btn-outline-primary edit-medicine" data-id="${
            medicine.medicine_id
          }">
            <i class="fas fa-edit mr-1"></i> S·ª≠a
          </button>
          <button type="button" class="btn btn-sm btn-outline-danger ml-1 delete-medicine" data-id="${
            medicine.medicine_id
          }" data-name="${medicine.name}">
            <i class="fas fa-trash-alt mr-1"></i> X√≥a
          </button>
        </div>
      </td>
    `;

      tbody.appendChild(row);

      // Th√™m event listeners cho c√°c n√∫t h√†nh ƒë·ªông
      row
        .querySelector(".edit-medicine")
        .addEventListener("click", function () {
          const medicineId = this.getAttribute("data-id");
          populateEditForm(medicineId);
          $("#editMedicineModal").modal("show");
        });

      row
        .querySelector(".delete-medicine")
        .addEventListener("click", function () {
          const medicineId = this.getAttribute("data-id");
          const medicineName = this.getAttribute("data-name");

          document.getElementById("deleteMedicineId").value = medicineId;
          document.getElementById("deleteMedicineName").textContent =
            medicineName;

          $("#deleteMedicineModal").modal("show");
        });
    });
  }

  /**
   * √Åp d·ª•ng b·ªô l·ªçc v√†o danh s√°ch thu·ªëc
   * @param {Array} medicines Danh s√°ch thu·ªëc g·ªëc
   * @return {Array} Danh s√°ch thu·ªëc ƒë√£ l·ªçc
   */
  function filterMedicines(medicines) {
    console.log("üîç B·∫Øt ƒë·∫ßu l·ªçc v·ªõi:", currentFilters);

    // Ki·ªÉm tra ƒë·∫ßu v√†o
    if (!medicines || !Array.isArray(medicines)) {
      console.error("‚ùå D·ªØ li·ªáu ƒë·∫ßu v√†o kh√¥ng h·ª£p l·ªá:", medicines);
      return [];
    }

    if (!currentFilters.expiry && !currentFilters.amount) {
      console.log("‚ÑπÔ∏è Kh√¥ng c√≥ b·ªô l·ªçc n√†o ƒë∆∞·ª£c √°p d·ª•ng, gi·ªØ nguy√™n danh s√°ch");
      return medicines;
    }

    const results = medicines.filter((medicine) => {
      let keepItem = true;

      // L·ªçc theo h·∫°n s·ª≠ d·ª•ng
      if (currentFilters.expiry) {
        const today = new Date();
        try {
          console.log(
            `üîç Ki·ªÉm tra h·∫°n thu·ªëc ${medicine.medicine_id}, EXP:`,
            medicine.EXP
          );

          // S·ª≠ d·ª•ng h√†m parseDate ƒë·ªÉ x·ª≠ l√Ω ng√†y dd-mm-yyyy
          const expDate = parseDate(medicine.EXP);

          // Ki·ªÉm tra n·∫øu ng√†y kh√¥ng h·ª£p l·ªá
          if (!expDate) {
            console.warn(
              `‚ö†Ô∏è Thu·ªëc ${medicine.medicine_id} c√≥ h·∫°n s·ª≠ d·ª•ng kh√¥ng h·ª£p l·ªá:`,
              medicine.EXP
            );
            return false;
          }

          // T√≠nh s·ªë ng√†y c√≤n l·∫°i
          const daysRemaining = Math.floor(
            (expDate - today) / (1000 * 60 * 60 * 24)
          );
          console.log(
            `üìÖ Thu·ªëc ${medicine.medicine_id} c√≤n ${daysRemaining} ng√†y`
          );

          // Logic l·ªçc
          if (
            currentFilters.expiry === "near" &&
            (daysRemaining < 0 || daysRemaining > 7)
          ) {
            console.log(
              `‚ùå Lo·∫°i b·ªè thu·ªëc ${medicine.medicine_id}: kh√¥ng ph·∫£i s·∫Øp h·∫øt h·∫°n (${daysRemaining} ng√†y)`
            );
            keepItem = false;
          } else if (
            currentFilters.expiry === "expired" &&
            daysRemaining >= 0
          ) {
            console.log(
              `‚ùå Lo·∫°i b·ªè thu·ªëc ${medicine.medicine_id}: ch∆∞a h·∫øt h·∫°n`
            );
            keepItem = false;
          } else if (currentFilters.expiry === "valid" && daysRemaining < 0) {
            console.log(`‚ùå Lo·∫°i b·ªè thu·ªëc ${medicine.medicine_id}: ƒë√£ h·∫øt h·∫°n`);
            keepItem = false;
          }
        } catch (error) {
          console.error(
            `‚ùå L·ªói khi x·ª≠ l√Ω h·∫°n s·ª≠ d·ª•ng cho thu·ªëc ${medicine.medicine_id}:`,
            error
          );
          keepItem = false;
        }
      }

      // L·ªçc theo s·ªë l∆∞·ª£ng
      if (keepItem && currentFilters.amount) {
        console.log(
          `üî¢ Ki·ªÉm tra s·ªë l∆∞·ª£ng thu·ªëc ${medicine.medicine_id}, amount:`,
          medicine.amount
        );

        if (currentFilters.amount === "low" && medicine.amount >= 10) {
          console.log(
            `‚ùå Lo·∫°i b·ªè thu·ªëc ${medicine.medicine_id}: s·ªë l∆∞·ª£ng kh√¥ng th·∫•p (${medicine.amount})`
          );
          keepItem = false;
        } else if (currentFilters.amount === "out" && medicine.amount > 0) {
          console.log(
            `‚ùå Lo·∫°i b·ªè thu·ªëc ${medicine.medicine_id}: c√≤n h√†ng (${medicine.amount})`
          );
          keepItem = false;
        } else if (
          currentFilters.amount === "available" &&
          medicine.amount <= 0
        ) {
          console.log(`‚ùå Lo·∫°i b·ªè thu·ªëc ${medicine.medicine_id}: h·∫øt h√†ng`);
          keepItem = false;
        }
      }

      if (keepItem) {
        console.log(
          `‚úÖ Gi·ªØ l·∫°i thu·ªëc ${medicine.medicine_id}: ph√π h·ª£p v·ªõi b·ªô l·ªçc`
        );
      }

      return keepItem;
    });

    console.log(
      `üîç K·∫øt qu·∫£ l·ªçc: ${results.length}/${medicines.length} thu·ªëc ph√π h·ª£p`
    );
    return results;
  }

  /**
   * L·∫•y tr·∫°ng th√°i h·∫°n s·ª≠ d·ª•ng c·ªßa thu·ªëc
   * @param {string} expDateStr Ng√†y h·∫øt h·∫°n (dd-mm-yyyy)
   * @return {Object} Tr·∫°ng th√°i h·∫°n s·ª≠ d·ª•ng
   */
  function getExpiryStatus(expDateStr) {
    const today = new Date();
    const expDate = parseDate(expDateStr);

    // Ki·ªÉm tra date c√≥ h·ª£p l·ªá kh√¥ng
    if (!expDate) {
      console.warn("‚ùó Ng√†y h·∫øt h·∫°n kh√¥ng h·ª£p l·ªá:", expDateStr);
      return { code: "unknown", text: "Kh√¥ng x√°c ƒë·ªãnh" };
    }

    // T√≠nh s·ªë ng√†y c√≤n l·∫°i
    const daysRemaining = Math.floor((expDate - today) / (1000 * 60 * 60 * 24));

    if (daysRemaining < 0) {
      return { code: "expired", text: "ƒê√£ h·∫øt h·∫°n" };
    } else if (daysRemaining <= 7) {
      return { code: "near", text: `C√≤n ${daysRemaining} ng√†y` };
    } else {
      return { code: "valid", text: "C√≤n h·∫°n" };
    }
  }

  /**
   * L·∫•y class CSS cho tr·∫°ng th√°i h·∫°n s·ª≠ d·ª•ng
   * @param {Object} status Tr·∫°ng th√°i h·∫°n s·ª≠ d·ª•ng
   * @return {Object} C√°c class CSS
   */
  function getExpiryClass(status) {
    switch (status.code) {
      case "expired":
        return { badge: "badge-expiry-danger", text: "text-danger" };
      case "near":
        return { badge: "badge-expiry-warning", text: "text-warning" };
      default:
        return { badge: "badge-expiry-safe", text: "text-success" };
    }
  }

  /**
   * C·∫≠p nh·∫≠t th√¥ng tin ph√¢n trang
   * @param {Object} data D·ªØ li·ªáu t·ª´ API
   */
  function updatePaginationInfo(data) {
    // C·∫≠p nh·∫≠t bi·∫øn to√†n c·ª•c
    totalPages = data.total_pages || 1;
    currentPage = data.page || 1;

    // Hi·ªÉn th·ªã th√¥ng tin ph√¢n trang
    const paginationInfo = document.getElementById("paginationInfo");
    if (paginationInfo) {
      paginationInfo.textContent = `Hi·ªÉn th·ªã ${data.data.length} tr√™n ${data.total} k·∫øt qu·∫£`;
    }

    // C·∫≠p nh·∫≠t UI ph√¢n trang
    updatePaginationUI();
  }

  /**
   * C·∫≠p nh·∫≠t giao di·ªán ph√¢n trang
   */
  function updatePaginationUI() {
    const pagination = document.getElementById("pagination");
    const prevPageBtn = document.getElementById("prevPage");
    const nextPageBtn = document.getElementById("nextPage");

    // X√≥a c√°c trang c≈©
    const pageItems = pagination.querySelectorAll(
      "li:not(.page-item:first-child):not(.page-item:last-child)"
    );
    pageItems.forEach((item) => item.remove());

    // C·∫≠p nh·∫≠t tr·∫°ng th√°i n√∫t Tr∆∞·ªõc/Sau
    prevPageBtn.parentElement.classList.toggle("disabled", currentPage <= 1);
    nextPageBtn.parentElement.classList.toggle(
      "disabled",
      currentPage >= totalPages
    );

    // Th√™m c√°c trang m·ªõi
    const firstPageLi = prevPageBtn.parentElement;

    // T√≠nh to√°n ph·∫°m vi trang hi·ªÉn th·ªã
    let startPage = Math.max(1, currentPage - 2);
    let endPage = Math.min(totalPages, startPage + 4);

    if (endPage - startPage < 4) {
      startPage = Math.max(1, endPage - 4);
    }

    for (let i = startPage; i <= endPage; i++) {
      const li = document.createElement("li");
      li.className = `page-item ${i === currentPage ? "active" : ""}`;

      const a = document.createElement("a");
      a.className = "page-link";
      a.href = "#";
      a.textContent = i;

      a.addEventListener("click", function (e) {
        e.preventDefault();
        currentPage = i;
        loadMedicines();
      });

      li.appendChild(a);
      pagination.insertBefore(li, nextPageBtn.parentElement);
    }
  }

  /**
   * C·∫≠p nh·∫≠t giao di·ªán s·∫Øp x·∫øp
   */
  function updateSortUI() {
    // X√≥a t·∫•t c·∫£ c√°c bi·ªÉu t∆∞·ª£ng s·∫Øp x·∫øp hi·ªán t·∫°i
    document.querySelectorAll(".sortable i").forEach((icon) => {
      icon.className = "fas fa-sort text-muted ml-1";
    });

    // Th√™m bi·ªÉu t∆∞·ª£ng s·∫Øp x·∫øp m·ªõi
    const column = document.querySelector(
      `.sortable[data-sort="${sortField}"]`
    );
    if (column) {
      const icon = column.querySelector("i");
      if (icon) {
        icon.className = `fas fa-sort-${
          sortDirection === "asc" ? "up" : "down"
        } text-primary ml-1`;
      }
    }
  }

  /**
   * ƒê·∫∑t l·∫°i c√°c b·ªô l·ªçc
   */
  function resetFilters() {
    console.log("üîÑ ƒê·∫∑t l·∫°i t·∫•t c·∫£ b·ªô l·ªçc");

    currentFilters = {
      expiry: "",
      amount: "",
    };

    // ƒê·∫∑t l·∫°i ch·∫ø ƒë·ªô xem thu·ªëc s·∫Øp h·∫øt h·∫°n
    viewingNearExpiry = false;

    document.getElementById("expiry-filter").value = "";
    document.getElementById("amount-filter").value = "";

    console.log("‚úÖ ƒê√£ reset b·ªô l·ªçc:", currentFilters);
  }

  /**
   * T·∫£i chi ti·∫øt thu·ªëc t·ª´ API
   * @param {string} id ID c·ªßa thu·ªëc
   */
  function loadMedicineDetails(id) {
    // L∆∞u ID thu·ªëc ƒëang xem
    selectedMedicineId = id;

    const detailsContainer = document.getElementById("medicineDetails");
    detailsContainer.innerHTML = `
      <div class="text-center py-3">
        <div class="spinner-border text-primary" role="status">
          <span class="sr-only">ƒêang t·∫£i...</span>
        </div>
      </div>
    `;

    fetch(`/UDPT-QLBN/Medicine/api_getMedicineById/${id}`)
      .then((response) => {
        if (!response.ok) {
          throw new Error(`L·ªói HTTP: ${response.status}`);
        }
        return response.json();
      })
      .then((medicine) => {
        console.log("‚úÖ T·∫£i chi ti·∫øt thu·ªëc th√†nh c√¥ng:", medicine);

        // T√≠nh to√°n tr·∫°ng th√°i h·∫°n s·ª≠ d·ª•ng
        const expStatus = getExpiryStatus(medicine.EXP);
        const expiryClass = getExpiryClass(expStatus);

        // T·∫°o n·ªôi dung chi ti·∫øt
        detailsContainer.innerHTML = `
          <h3 class="mb-3">${medicine.name}</h3>
          
          <div class="mb-4">
            <span class="badge ${expiryClass.badge}">
              <i class="fas fa-clock mr-1"></i> ${expStatus.text}
            </span>
          </div>
          
          <div class="table-responsive">
            <table class="table table-bordered">
              <tbody>
                <tr>
                  <th class="bg-light">M√£ thu·ªëc</th>
                  <td>${medicine.medicine_id}</td>
                </tr>
                <tr>
                  <th class="bg-light">Ng√†y s·∫£n xu·∫•t</th>
                  <td>${formatDate(medicine.MFG)}</td>
                </tr>
                <tr>
                  <th class="bg-light">H·∫°n s·ª≠ d·ª•ng</th>
                  <td class="${expiryClass.text}">${formatDate(
          medicine.EXP
        )}</td>
                </tr>
                <tr>
                  <th class="bg-light">S·ªë l∆∞·ª£ng</th>
                  <td>${medicine.amount.toLocaleString()} ${medicine.unit}</td>
                </tr>
                <tr>
                  <th class="bg-light">ƒê∆°n gi√°</th>
                  <td>${medicine.price.toLocaleString()} ƒë</td>
                </tr>
              </tbody>
            </table>
          </div>
        `;
      })
      .catch((error) => {
        console.error("‚ùå L·ªói khi t·∫£i chi ti·∫øt thu·ªëc:", error);
        detailsContainer.innerHTML = `
          <div class="alert alert-danger">
            <i class="fas fa-exclamation-circle mr-1"></i> 
            Kh√¥ng th·ªÉ t·∫£i th√¥ng tin thu·ªëc. Vui l√≤ng th·ª≠ l·∫°i sau.
          </div>
        `;
      });
  }

  /**
   * T·∫£i th√¥ng tin thu·ªëc v√†o form ch·ªânh s·ª≠a
   * @param {string} id ID c·ªßa thu·ªëc
   */
  function populateEditForm(id) {
    console.log("üìù ƒêang t·∫£i th√¥ng tin thu·ªëc ƒë·ªÉ ch·ªânh s·ª≠a, ID:", id);

    // Hi·ªÉn th·ªã loading n·∫øu c·∫ßn
    document.getElementById("editMedicineForm").classList.add("loading");

    fetch(`/UDPT-QLBN/Medicine/api_getMedicineById/${id}`)
      .then((response) => {
        if (!response.ok) {
          throw new Error(`L·ªói HTTP: ${response.status}`);
        }
        return response.json();
      })
      .then((medicine) => {
        console.log("‚úÖ T·∫£i chi ti·∫øt thu·ªëc th√†nh c√¥ng:", medicine);

        // ƒêi·ªÅn th√¥ng tin v√†o form
        document.getElementById("editMedicineId").value = medicine.medicine_id;
        document.getElementById("editMedicineName").value = medicine.name;
        document.getElementById("editMedicineMFG").value = formatDateForInput(
          medicine.MFG
        );
        document.getElementById("editMedicineEXP").value = formatDateForInput(
          medicine.EXP
        );
        document.getElementById("editMedicineAmount").value = medicine.amount;
        document.getElementById("editMedicineUnit").value = medicine.unit;
        document.getElementById("editMedicinePrice").value = medicine.price;

        // B·ªè loading state
        document.getElementById("editMedicineForm").classList.remove("loading");
      })
      .catch((error) => {
        console.error("‚ùå L·ªói khi t·∫£i th√¥ng tin thu·ªëc:", error);
        showAlert(
          "Kh√¥ng th·ªÉ t·∫£i th√¥ng tin thu·ªëc. Vui l√≤ng th·ª≠ l·∫°i sau.",
          "danger"
        );
        $("#editMedicineModal").modal("hide");
      });
  }

  /**
   * Th√™m thu·ªëc m·ªõi
   */
  function addMedicine() {
    // L·∫•y d·ªØ li·ªáu t·ª´ form
    const name = document.getElementById("medicineName").value;
    const MFG = document.getElementById("medicineMFG").value;
    const EXP = document.getElementById("medicineEXP").value;
    const amount = document.getElementById("medicineAmount").value;
    const unit = document.getElementById("medicineUnit").value;
    const price = document.getElementById("medicinePrice").value;

    // Ki·ªÉm tra d·ªØ li·ªáu h·ª£p l·ªá
    if (!validateMedicineForm("addMedicineForm")) {
      return;
    }

    // Chu·∫©n b·ªã d·ªØ li·ªáu g·ª≠i l√™n server
    const medicineData = {
      name,
      MFG,
      EXP,
      amount: parseInt(amount),
      unit,
      price: parseFloat(price),
    };

    // G·ª≠i request t·∫°o thu·ªëc m·ªõi
    fetch("/UDPT-QLBN/Medicine/api_createMedicine", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify(medicineData),
    })
      .then((response) => {
        if (!response.ok) {
          return response.json().then((data) => {
            throw new Error(data.error || `L·ªói HTTP: ${response.status}`);
          });
        }
        return response.json();
      })
      .then((data) => {
        console.log("‚úÖ Th√™m thu·ªëc th√†nh c√¥ng:", data);

        // ƒê√≥ng modal v√† reset form
        $("#addMedicineModal").modal("hide");
        document.getElementById("addMedicineForm").reset();

        // Th√¥ng b√°o th√†nh c√¥ng
        showAlert(`ƒê√£ th√™m thu·ªëc "${name}" th√†nh c√¥ng!`, "success");

        // T·∫£i l·∫°i danh s√°ch thu·ªëc
        loadMedicines();
      })
      .catch((error) => {
        console.error("‚ùå L·ªói khi th√™m thu·ªëc:", error);
        showAlert(`Kh√¥ng th·ªÉ th√™m thu·ªëc. L·ªói: ${error.message}`, "danger");
      });
  }

  /**
   * C·∫≠p nh·∫≠t th√¥ng tin thu·ªëc
   */
  function updateMedicine() {
    // L·∫•y d·ªØ li·ªáu t·ª´ form
    const id = document.getElementById("editMedicineId").value;
    const MFG = document.getElementById("editMedicineMFG").value;
    const EXP = document.getElementById("editMedicineEXP").value;
    const amount = document.getElementById("editMedicineAmount").value;
    const unit = document.getElementById("editMedicineUnit").value;
    const price = document.getElementById("editMedicinePrice").value;

    // Ki·ªÉm tra d·ªØ li·ªáu h·ª£p l·ªá
    if (!validateMedicineForm("editMedicineForm")) {
      return;
    }

    // Chu·∫©n b·ªã d·ªØ li·ªáu g·ª≠i l√™n server
    const medicineData = {
      MFG,
      EXP,
      amount: parseInt(amount),
      unit,
      price: parseFloat(price),
    };

    // G·ª≠i request c·∫≠p nh·∫≠t thu·ªëc
    fetch(`/UDPT-QLBN/Medicine/api_updateMedicine/${id}`, {
      method: "PUT",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify(medicineData),
    })
      .then((response) => {
        if (!response.ok) {
          return response.json().then((data) => {
            throw new Error(data.error || `L·ªói HTTP: ${response.status}`);
          });
        }
        return response.json();
      })
      .then((data) => {
        console.log("‚úÖ C·∫≠p nh·∫≠t thu·ªëc th√†nh c√¥ng:", data);

        // ƒê√≥ng modal
        $("#editMedicineModal").modal("hide");

        // Th√¥ng b√°o th√†nh c√¥ng
        showAlert(`ƒê√£ c·∫≠p nh·∫≠t thu·ªëc th√†nh c√¥ng!`, "success");

        // T·∫£i l·∫°i danh s√°ch thu·ªëc
        loadMedicines();
      })
      .catch((error) => {
        console.error("‚ùå L·ªói khi c·∫≠p nh·∫≠t thu·ªëc:", error);
        showAlert(`Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t thu·ªëc. L·ªói: ${error.message}`, "danger");
      });
  }

  /**
   * X√≥a thu·ªëc
   */
  function deleteMedicine() {
    const id = document.getElementById("deleteMedicineId").value;
    const name = document.getElementById("deleteMedicineName").textContent;

    fetch(`/UDPT-QLBN/Medicine/api_deleteMedicine/${id}`, {
      method: "DELETE",
    })
      .then((response) => {
        if (!response.ok) {
          return response.json().then((data) => {
            throw new Error(data.error || `L·ªói HTTP: ${response.status}`);
          });
        }
        return response.json();
      })
      .then((data) => {
        console.log("‚úÖ X√≥a thu·ªëc th√†nh c√¥ng:", data);

        // ƒê√≥ng modal
        $("#deleteMedicineModal").modal("hide");

        // Th√¥ng b√°o th√†nh c√¥ng
        showAlert(`ƒê√£ x√≥a thu·ªëc "${name}" th√†nh c√¥ng!`, "success");

        // T·∫£i l·∫°i danh s√°ch thu·ªëc
        loadMedicines();
      })
      .catch((error) => {
        console.error("‚ùå L·ªói khi x√≥a thu·ªëc:", error);
        showAlert(`Kh√¥ng th·ªÉ x√≥a thu·ªëc. L·ªói: ${error.message}`, "danger");

        // ƒê√≥ng modal
        $("#deleteMedicineModal").modal("hide");
      });
  }

  /**
   * Ki·ªÉm tra d·ªØ li·ªáu form thu·ªëc
   * @param {string} formId ID c·ªßa form c·∫ßn ki·ªÉm tra
   * @return {boolean} D·ªØ li·ªáu form h·ª£p l·ªá hay kh√¥ng
   */
  function validateMedicineForm(formId) {
    const form = document.getElementById(formId);

    // ƒê·∫∑t class was-validated ƒë·ªÉ hi·ªÉn th·ªã th√¥ng b√°o l·ªói
    form.classList.add("was-validated");

    // Ki·ªÉm tra c√°c tr∆∞·ªùng b·∫Øt bu·ªôc
    const requiredFields = form.querySelectorAll("[required]");
    let isValid = true;

    requiredFields.forEach((field) => {
      if (!field.value.trim()) {
        field.classList.add("is-invalid");
        isValid = false;
      } else {
        field.classList.remove("is-invalid");
      }
    });

    // Ki·ªÉm tra ng√†y s·∫£n xu·∫•t v√† h·∫°n s·ª≠ d·ª•ng
    if (formId === "addMedicineForm") {
      const mfg = new Date(document.getElementById("medicineMFG").value);
      const exp = new Date(document.getElementById("medicineEXP").value);

      if (mfg >= exp) {
        document.getElementById("medicineEXP").classList.add("is-invalid");
        document.getElementById("medicineEXP").nextElementSibling.textContent =
          "H·∫°n s·ª≠ d·ª•ng ph·∫£i sau ng√†y s·∫£n xu·∫•t";
        isValid = false;
      }
    } else if (formId === "editMedicineForm") {
      const mfg = new Date(document.getElementById("editMedicineMFG").value);
      const exp = new Date(document.getElementById("editMedicineEXP").value);

      if (mfg >= exp) {
        document.getElementById("editMedicineEXP").classList.add("is-invalid");
        document.getElementById(
          "editMedicineEXP"
        ).nextElementSibling.textContent = "H·∫°n s·ª≠ d·ª•ng ph·∫£i sau ng√†y s·∫£n xu·∫•t";
        isValid = false;
      }
    }

    return isValid;
  }

  /**
   * Hi·ªÉn th·ªã th√¥ng b√°o
   * @param {string} message N·ªôi dung th√¥ng b√°o
   * @param {string} type Lo·∫°i th√¥ng b√°o (success, danger, warning, info)
   * @param {number} duration Th·ªùi gian hi·ªÉn th·ªã (ms)
   */
  function showAlert(message, type = "info", duration = 5000) {
    const alertContainer = document.getElementById("alert-container");

    // T·∫°o alert
    const alert = document.createElement("div");
    alert.className = `alert alert-${type} alert-dismissible fade show`;
    alert.innerHTML = `
      ${message}
      <button type="button" class="close" data-dismiss="alert" aria-label="Close">
        <span aria-hidden="true">&times;</span>
      </button>
    `;

    // Th√™m alert v√†o container
    alertContainer.appendChild(alert);

    // T·ª± ƒë·ªông ·∫©n alert sau th·ªùi gian ch·ªâ ƒë·ªãnh
    if (duration > 0) {
      setTimeout(() => {
        alert.classList.remove("show");
        setTimeout(() => {
          alert.remove();
        }, 150);
      }, duration);
    }
  }

  /**
   * Hi·ªÉn th·ªã/·∫©n loading indicator
   * @param {boolean} show Hi·ªÉn th·ªã loading hay kh√¥ng
   */
  function showLoading(show) {
    const loadingIndicator = document.getElementById("loadingIndicator");

    if (show) {
      loadingIndicator.classList.remove("d-none");
    } else {
      loadingIndicator.classList.add("d-none");
    }
  }

  /**
   * Parse date t·ª´ chu·ªói dd-mm-yyyy th√†nh ƒë·ªëi t∆∞·ª£ng Date h·ª£p l·ªá
   * @param {string} dateStr Chu·ªói ng√†y ƒë·ªãnh d·∫°ng dd-mm-yyyy
   * @return {Date|null} ƒê·ªëi t∆∞·ª£ng Date ho·∫∑c null n·∫øu kh√¥ng h·ª£p l·ªá
   */
  function parseDate(dateStr) {
    if (!dateStr) return null;

    // Ki·ªÉm tra ƒë·ªãnh d·∫°ng dd-mm-yyyy
    const ddmmyyyyRegex = /^(\d{2})-(\d{2})-(\d{4})$/;
    const match = dateStr.match(ddmmyyyyRegex);

    if (match) {
      const [, day, month, year] = match;
      // Chuy·ªÉn th√†nh yyyy-mm-dd cho JS parse
      const isoDate = `${year}-${month}-${day}`;
      const date = new Date(isoDate);
      return isNaN(date.getTime()) ? null : date;
    }

    // N·∫øu l√† ƒë·ªãnh d·∫°ng kh√°c, th·ª≠ parse tr·ª±c ti·∫øp
    const date = new Date(dateStr);
    return isNaN(date.getTime()) ? null : date;
  }

  /**
   * Format date t·ª´ chu·ªói dd-mm-yyyy sang dd-mm-yyyy (gi·ªØ nguy√™n)
   * @param {string} dateStr Date string t·ª´ API (dd-mm-yyyy)
   * @return {string} Date string ƒë√£ format (dd-mm-yyyy)
   */
  function formatDate(dateStr) {
    if (!dateStr) return "";

    // N·∫øu ƒë√£ ƒë√∫ng ƒë·ªãnh d·∫°ng dd-mm-yyyy, gi·ªØ nguy√™n
    if (/^\d{2}-\d{2}-\d{4}$/.test(dateStr)) {
      return dateStr;
    }

    // Tr∆∞·ªùng h·ª£p kh√°c, th·ª≠ parse v√† format l·∫°i
    const date = parseDate(dateStr);
    if (date) {
      const day = String(date.getDate()).padStart(2, "0");
      const month = String(date.getMonth() + 1).padStart(2, "0");
      const year = date.getFullYear();
      return `${day}-${month}-${year}`;
    }

    console.warn("‚ùó Kh√¥ng th·ªÉ format ng√†y:", dateStr);
    return dateStr;
  }

  /**
   * Format date t·ª´ dd-mm-yyyy sang yyyy-mm-dd (cho input type="date")
   * @param {string} dateStr Date string t·ª´ API (dd-mm-yyyy)
   * @return {string} Date string cho input (yyyy-mm-dd)
   */
  function formatDateForInput(dateStr) {
    if (!dateStr) return "";

    // X·ª≠ l√Ω ƒë·ªãnh d·∫°ng dd-mm-yyyy
    const ddmmyyyyRegex = /^(\d{2})-(\d{2})-(\d{4})$/;
    const match = dateStr.match(ddmmyyyyRegex);

    if (match) {
      const [, day, month, year] = match;
      return `${year}-${month}-${day}`;
    }

    // N·∫øu ƒë√£ ƒë√∫ng ƒë·ªãnh d·∫°ng yyyy-mm-dd, tr·∫£ v·ªÅ lu√¥n
    if (/^\d{4}-\d{2}-\d{2}$/.test(dateStr)) {
      return dateStr;
    }

    // Th·ª≠ parse v√† format l·∫°i
    const date = parseDate(dateStr);
    if (date) {
      const day = String(date.getDate()).padStart(2, "0");
      const month = String(date.getMonth() + 1).padStart(2, "0");
      const year = date.getFullYear();
      return `${year}-${month}-${day}`;
    }

    console.warn("‚ùó Kh√¥ng th·ªÉ format ng√†y cho input:", dateStr);
    return "";
  }
});
